import processing.sound.*;
SoundFile file;

String gameState;
int wins;
int losses;

Timer countDownTimer;
int timeLeft;
int maxTime;

Catcher catcher;
Drop [] drops;
int numDrops;

Timer timer;
int timeInterval;
int activeDrops;

int score;
String s;

PImage rabbit = new PImage();
PImage bg = new PImage();
PImage apple = new PImage();
PFont Blobtastics;
PFont CHERI;
PImage bombs = new PImage();
PImage bg2 = new PImage();

Bomb b;
void setup() {
  size(800, 600);
  //bomb
  b = new Bomb();
  catcher = new Catcher(30);
  rabbit = loadImage("rabbit.png");
  bg = loadImage("bg.jpg");
  apple = loadImage("apple.png");
  bombs = loadImage("bombs.png");
  Blobtastics = createFont("Blobtastics.ttf", 12);
  CHERI = createFont("CHERI.TTF",12);
  bg2 = loadImage("bg2.jpg");
  file = new SoundFile(this, "sound.mp3");
  file.play();

  numDrops = 80;
  drops = new Drop[numDrops];
  for (int i = 0; i < numDrops; i++) {
    drops[i] = new Drop();
  }
  activeDrops = 0;
  timeInterval = 300;
  timer = new Timer(timeInterval);
  timer. start();

  score = 0;
  s ="Score: " + score;

  gameState = "START";
  wins = 0;
  losses = 0;

  countDownTimer = new Timer(1000);
  maxTime = 60;
  timeLeft = maxTime;
}

void draw() {
  clearBackground();
  if (gameState =="START") {
    startGame();
  } else if (gameState == "PLAY") {
    playGame();
  } else if (gameState =="WIN") {
    winGame();
  } else if (gameState =="LOSE") {
    loseGame();
  }
}

void startGame() {
  image(bg2,0,0);
  textAlign(CENTER);
  textSize(18);
  fill(#fefced);
  textFont(CHERI, 40);
  text("Click Anywhere to Play!", width/2, height/2-10);
  textSize(14);
  fill(#343132);
  textFont(CHERI, 20);
  text("Catch the apples\nbefore time runs out", width/2, height/2+70);
  //look for the click
  if (mousePressed == true) {
    gameState = "PLAY";
    countDownTimer.start();
  }
   showScore();
}
void playGame() {
  noStroke();
  clearBackground();
  
  image(bg, 0, 0);
  //timer stuff
  if (timer.complete()==true) {
    if (activeDrops < numDrops) {
      activeDrops++;
    }
    timer.start();
  }
  b.update();
  b.display();
  if (intersect(catcher,b) == true){
   gameState = "LOSE";
  }
  
  //drop 
  for (int i=0; i< activeDrops; i++) {
    drops[i].update();
    drops[i].display();
    //check collisions
    if (intersect(catcher, drops[i]) == true) {
      drops[i].caught();
      score++;
      if (score >=30) {
        //win
        wins++;
        gameState = "WIN";
      }
    }
  }
  //countDown logic
  if (countDownTimer.complete() ==true) {
    if (timeLeft > 1) {
      timeLeft--;
      countDownTimer.start();
    } else {
      //lose
      losses++;
      gameState = "LOSE";
    }
  }
  //update UI
  textAlign(LEFT);
  textSize(12);
  fill(255, 255, 255);
  
  s = "Time Left:" +timeLeft;
  textFont(CHERI, 20);
  text(s, 20, 60);
  
  //show score
  s = "Score:" +score;
  text(s, 20, 30);
  
  catcher.update();
  catcher.display();
}



void winGame() {
  textAlign(CENTER);
  textSize(28);
  fill(0,0,0);
  text("Great Job! That was so difficult. You should be proud", width/2, height/2);
  textSize(24);
  fill(0,0,0);
  text("Play Again?", width/2, height/2+50);
 

  drawReplayButton();
  showScore();
}
void loseGame() {
  textAlign(CENTER);
  textSize(34);
  fill(#3A4734);
  text("You Lost!That takes talent", width/2, height/2);
  textSize(24);
  fill(#3A4734);
  text("Again?", width/2, height/2+50);

  drawReplayButton();
  showScore();
} 

void resetGame() {
  timeLeft = maxTime;
  countDownTimer.start();
  score = 0;
  for (int i =0; i < numDrops;i++){
  drops[i].reset();  
  }
  activeDrops = 0;
  timer. start();
  b.reset();
}

void showScore() {
  //set the text for w/l
  textAlign(LEFT);
  textSize(14);
  fill(0);
  //String s ="Wins: " + wins + "\n" +"Losses:" + losses;
  //text(s, 20, 50);
}
void drawReplayButton() {
  //draw button
  fill(100);
 // rect(width/2-50, height/2+80, 100, 60);
  fill(#f48955);
  textSize(20);
  text("HIT SPACE BAR TO PLAY AGAIN", width/2, height/2+122);
  //edge of the button
  //float leftEdge = width/2-50;
  //float rightEdge = width/2+50;
  //float topEdge = height/2 +140;
  //float bottomEdge = height/2 +140;   
 // rect(leftEdge,topEdge, 50,50);
  //look for the click
   if (keyPressed) {
    if (key == ' ' || key == ' ') {
    resetGame();
    gameState = "PLAY";
    }
  }
  
  //if (mousePressed == true &&
  //  mouseX > leftEdge &&
  //  mouseX > rightEdge &&
  //  mouseY > topEdge &&
  //  mouseY < bottomEdge
  //  ) {
  //  resetGame();
  //  gameState = "PLAY";
  //}
  
  
}

boolean intersect(Catcher a, Drop b) {
  float distance = dist(a.x, a.y, b.x, b.y);
  if (distance < a.r+b.r) {
    return true;
  } else {
    return false;
  }
}
boolean intersect(Catcher a, Bomb b) {
  float distance = dist(a.x, a.y, b.x, b.y);
  if (distance < a.r+b.r) {
    return true;
  } else {
    return false;
  }
}

void clearBackground(){
 fill(255,120);
 rect(0,0,width,height);
}
